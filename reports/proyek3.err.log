Traceback (most recent call last):
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.multioutput import MultiOutputRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
import numpy as np
import matplotlib.pyplot as plt

# List of regression models
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=32),
    "SVR": MultiOutputRegressor(SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1))
}

# Dictionary to store evaluation results
results = {}

# Iterate over each model
for name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Predict on the test data
    y_pred = model.predict(X_test)

    # Evaluate for each target day ahead
    mse_list = []
    mape_list = []
    for i in range(FORECAST_STEPS):
        mse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i])
        mape = mean_absolute_percentage_error(y_test.iloc[:, i], y_pred[:, i]) * 100
        mse_list.append(mse)
        mape_list.append(mape)

    # Save average evaluation results
    results[name] = {
        "Average RMSE": np.sqrt(np.mean(mse_list)),
        "Average MAPE": np.mean(mape_list)
    }

    # Inverse transform predictions and actual values to original scale
    y_pred_original = scaler_target.inverse_transform(y_pred)
    y_test_original = scaler_target.inverse_transform(y_test)

    # Plot the actual vs predicted values for each day
    plt.figure(figsize=(15, 6))
    for i in range(FORECAST_STEPS):
        plt.plot(
            y_test.index, y_test_original[:, i], label=f"Actual Target+{i+1}", linestyle="dashed"
        )
        plt.plot(
            y_test.index, y_pred_original[:, i], label=f"Predicted Target+{i+1}", alpha=0.7
        )

    # Add plot details
    plt.title(f'Actual vs Predicted Values ({name})')
    plt.xlabel('Tanggal')
    plt.ylabel('Kurs')
    plt.legend()
    plt.grid(True)

    # Show plot
    plt.show()

# Display evaluation results
print("HASIL EVALUASI MODEL")
for model, metrics in results.items():
    print(f"{model}:")
    print(f"  Average RMSE: {metrics['Average RMSE']:.2f}")
    print(f"  Average MAPE: {metrics['Average MAPE']:.2f}%")

# Find the model with the best Average MAPE (smallest value)
best_model_name = min(results, key=lambda x: results[x]["Average MAPE"])
best_model = models[best_model_name]

# Print the best model
print(f"\nModel terbaik: {best_model_name}")

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mIndexingError[0m                             Traceback (most recent call last)
Cell [1;32mIn[15], line 31[0m
[0;32m     29[0m mape_list [38;5;241m=[39m []
[0;32m     30[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(FORECAST_STEPS):
[1;32m---> 31[0m     mse [38;5;241m=[39m mean_squared_error([43my_test[49m[38;5;241;43m.[39;49m[43miloc[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[43mi[49m[43m][49m, y_pred[:, i])
[0;32m     32[0m     mape [38;5;241m=[39m mean_absolute_percentage_error(y_test[38;5;241m.[39miloc[:, i], y_pred[:, i]) [38;5;241m*[39m [38;5;241m100[39m
[0;32m     33[0m     mse_list[38;5;241m.[39mappend(mse)

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexing.py:1184[0m, in [0;36m_LocationIndexer.__getitem__[1;34m(self, key)[0m
[0;32m   1182[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_is_scalar_access(key):
[0;32m   1183[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mobj[38;5;241m.[39m_get_value([38;5;241m*[39mkey, takeable[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_takeable)
[1;32m-> 1184[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_getitem_tuple[49m[43m([49m[43mkey[49m[43m)[49m
[0;32m   1185[0m [38;5;28;01melse[39;00m:
[0;32m   1186[0m     [38;5;66;03m# we by definition only have the 0th axis[39;00m
[0;32m   1187[0m     axis [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39maxis [38;5;129;01mor[39;00m [38;5;241m0[39m

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexing.py:1690[0m, in [0;36m_iLocIndexer._getitem_tuple[1;34m(self, tup)[0m
[0;32m   1689[0m [38;5;28;01mdef[39;00m [38;5;21m_getitem_tuple[39m([38;5;28mself[39m, tup: [38;5;28mtuple[39m):
[1;32m-> 1690[0m     tup [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_tuple_indexer[49m[43m([49m[43mtup[49m[43m)[49m
[0;32m   1691[0m     [38;5;28;01mwith[39;00m suppress(IndexingError):
[0;32m   1692[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_lowerdim(tup)

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexing.py:962[0m, in [0;36m_LocationIndexer._validate_tuple_indexer[1;34m(self, key)[0m
[0;32m    957[0m [38;5;129m@final[39m
[0;32m    958[0m [38;5;28;01mdef[39;00m [38;5;21m_validate_tuple_indexer[39m([38;5;28mself[39m, key: [38;5;28mtuple[39m) [38;5;241m-[39m[38;5;241m>[39m [38;5;28mtuple[39m:
[0;32m    959[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[0;32m    960[0m [38;5;124;03m    Check the key for valid keys across my indexer.[39;00m
[0;32m    961[0m [38;5;124;03m    """[39;00m
[1;32m--> 962[0m     key [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_key_length[49m[43m([49m[43mkey[49m[43m)[49m
[0;32m    963[0m     key [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_expand_ellipsis(key)
[0;32m    964[0m     [38;5;28;01mfor[39;00m i, k [38;5;129;01min[39;00m [38;5;28menumerate[39m(key):

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexing.py:1001[0m, in [0;36m_LocationIndexer._validate_key_length[1;34m(self, key)[0m
[0;32m    999[0m             [38;5;28;01mraise[39;00m IndexingError(_one_ellipsis_message)
[0;32m   1000[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_validate_key_length(key)
[1;32m-> 1001[0m     [38;5;28;01mraise[39;00m IndexingError([38;5;124m"[39m[38;5;124mToo many indexers[39m[38;5;124m"[39m)
[0;32m   1002[0m [38;5;28;01mreturn[39;00m key

[1;31mIndexingError[0m: Too many indexers

