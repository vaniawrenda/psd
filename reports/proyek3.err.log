Traceback (most recent call last):
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\vania wrenda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.multioutput import MultiOutputRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
import numpy as np
import matplotlib.pyplot as plt

# List of regression models
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=32),
    "SVR": MultiOutputRegressor(SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1))
}

# Dictionary to store evaluation results
results = {}

# Iterate over each model
for name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Predict on the test data
    y_pred = model.predict(X_test)

    # Ensure y_test is 2D for multi-output models
    if y_test.ndim == 1:
        y_test = y_test.reshape(-1, 1)

    # Evaluate for each target day ahead
    mse_list = []
    mape_list = []
    for i in range(FORECAST_STEPS):
        # Ensure correct indexing for multi-output predictions
        mse = mean_squared_error(y_test[:, i], y_pred[:, i])
        mape = mean_absolute_percentage_error(y_test[:, i], y_pred[:, i]) * 100
        mse_list.append(mse)
        mape_list.append(mape)

    # Save average evaluation results
    results[name] = {
        "Average RMSE": np.sqrt(np.mean(mse_list)),
        "Average MAPE": np.mean(mape_list)
    }

    # Inverse transform predictions and actual values to original scale
    y_pred_original = scaler_target.inverse_transform(y_pred)
    y_test_original = scaler_target.inverse_transform(y_test)

    # Plot the actual vs predicted values for each day
    plt.figure(figsize=(15, 6))
    for i in range(FORECAST_STEPS):
        plt.plot(
            y_test.index, y_test_original[:, i], label=f"Actual Target+{i+1}", linestyle="dashed"
        )
        plt.plot(
            y_test.index, y_pred_original[:, i], label=f"Predicted Target+{i+1}", alpha=0.7
        )

    # Add plot details
    plt.title(f'Actual vs Predicted Values ({name})')
    plt.xlabel('Tanggal')
    plt.ylabel('Kurs')
    plt.legend()
    plt.grid(True)

    # Show plot
    plt.show()

# Display evaluation results
print("HASIL EVALUASI MODEL")
for model, metrics in results.items():
    print(f"{model}:")
    print(f"  Average RMSE: {metrics['Average RMSE']:.2f}")
    print(f"  Average MAPE: {metrics['Average MAPE']:.2f}%")

# Find the model with the best Average MAPE (smallest value)
best_model_name = min(results, key=lambda x: results[x]["Average MAPE"])
best_model = models[best_model_name]

# Print the best model
print(f"\nModel terbaik: {best_model_name}")

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mAttributeError[0m                            Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_18840\1066415652.py[0m in [0;36m?[1;34m()[0m
[0;32m     25[0m     [0my_pred[0m [1;33m=[0m [0mmodel[0m[1;33m.[0m[0mpredict[0m[1;33m([0m[0mX_test[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     26[0m [1;33m[0m[0m
[0;32m     27[0m     [1;31m# Ensure y_test is 2D for multi-output models[0m[1;33m[0m[1;33m[0m[0m
[0;32m     28[0m     [1;32mif[0m [0my_test[0m[1;33m.[0m[0mndim[0m [1;33m==[0m [1;36m1[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 29[1;33m         [0my_test[0m [1;33m=[0m [0my_test[0m[1;33m.[0m[0mreshape[0m[1;33m([0m[1;33m-[0m[1;36m1[0m[1;33m,[0m [1;36m1[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     30[0m [1;33m[0m[0m
[0;32m     31[0m     [1;31m# Evaluate for each target day ahead[0m[1;33m[0m[1;33m[0m[0m
[0;32m     32[0m     [0mmse_list[0m [1;33m=[0m [1;33m[[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m

[1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\generic.py[0m in [0;36m?[1;34m(self, name)[0m
[0;32m   6295[0m             [1;32mand[0m [0mname[0m [1;32mnot[0m [1;32min[0m [0mself[0m[1;33m.[0m[0m_accessors[0m[1;33m[0m[1;33m[0m[0m
[0;32m   6296[0m             [1;32mand[0m [0mself[0m[1;33m.[0m[0m_info_axis[0m[1;33m.[0m[0m_can_hold_identifiers_and_holds_name[0m[1;33m([0m[0mname[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   6297[0m         [1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m   6298[0m             [1;32mreturn[0m [0mself[0m[1;33m[[0m[0mname[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 6299[1;33m         [1;32mreturn[0m [0mobject[0m[1;33m.[0m[0m__getattribute__[0m[1;33m([0m[0mself[0m[1;33m,[0m [0mname[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;31mAttributeError[0m: 'Series' object has no attribute 'reshape'

